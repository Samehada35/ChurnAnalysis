printcp(rpart_model)
# Get the index of this lowest xerror
opt <- which.min(rpart_model$cptable[,"xerror"])
cp <- rpart_model$cptable[opt, "CP"]
cp
# Finally, we prune the tree
pruned_model <- prune(rpart_model, cp)
plot(pruned_model)
text(pruned_model)
# Compute the proportion of correct prediction with the pruned_model
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
mean(rpart_pruned_predict == testset$Class)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
# Make 50 runs, without pruning
unpruned_set <- multiple_runs_classification(0.8, 50, Ionosphere)
mean(unpruned_set)
sd(unpruned_set)
# Make 50 runs, with pruning
pruned_set <- multiple_runs_classification(0.8, 50, Ionosphere, prune_tree = TRUE)
mean(pruned_set)
sd(pruned_set)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
shuffle(dataset)
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
dataset <- dataset[,-grep("train", names(trainset))]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
# Make 50 runs, without pruning
unpruned_set <- multiple_runs_classification(0.8, 50, Ionosphere)
mean(unpruned_set)
sd(unpruned_set)
# Make 50 runs, with pruning
pruned_set <- multiple_runs_classification(0.8, 50, Ionosphere, prune_tree = TRUE)
mean(pruned_set)
sd(pruned_set)
shuffle()
library(merTools)
install.packages(merTools)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
dataset[sample(nrow(df), nrow(df)), ]
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
dataset <- dataset[,-grep("train", names(trainset))]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
# Make 50 runs, without pruning
unpruned_set <- multiple_runs_classification(0.8, 50, Ionosphere)
mean(unpruned_set)
sd(unpruned_set)
# Make 50 runs, with pruning
pruned_set <- multiple_runs_classification(0.8, 50, Ionosphere, prune_tree = TRUE)
mean(pruned_set)
sd(pruned_set)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
dataset <- dataset[,-grep("train", names(trainset))]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
# Make 50 runs, without pruning
unpruned_set <- multiple_runs_classification(0.8, 50, Ionosphere)
mean(unpruned_set)
sd(unpruned_set)
# Make 50 runs, with pruning
pruned_set <- multiple_runs_classification(0.8, 50, Ionosphere, prune_tree = TRUE)
mean(pruned_set)
sd(pruned_set)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
# Make 50 runs, without pruning
unpruned_set <- multiple_runs_classification(0.8, 50, Ionosphere)
mean(unpruned_set)
sd(unpruned_set)
# Make 50 runs, with pruning
pruned_set <- multiple_runs_classification(0.8, 50, Ionosphere, prune_tree = TRUE)
mean(pruned_set)
sd(pruned_set)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
dataset <- dataset[sample(nrow(dataset)),]
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
# Make 50 runs, without pruning
unpruned_set <- multiple_runs_classification(0.8, 50, Ionosphere)
mean(unpruned_set)
sd(unpruned_set)
# Make 50 runs, with pruning
pruned_set <- multiple_runs_classification(0.8, 50, Ionosphere, prune_tree = TRUE)
mean(pruned_set)
sd(pruned_set)
library(ggplot2)
churn.data1.original <- read.table(file="./data/DATA1_churn_analysis.csv", header=T, sep = ",")
churn.data2.original <- read.table(file="./data/DATA2_churn_analysis.csv", header=T, sep = ",")
library(rpart)
library(lattice)
library(caret)
par(mfrow=c(1,1))
# Set a seed
set.seed(42)
# Add a column to the dataset and insert 1 foo training, else 0
churn.data1.original[, "train"] <- ifelse(runif(nrow(churn.data1.original))<0.8,1,0)
churn.data2.original[, "train"] <- ifelse(runif(nrow(churn.data2.original))<0.8,1,0)
churn.data1.trainset <- churn.data1.original[churn.data1.original$train == 1,]
churn.data1.testset <- churn.data1.original[churn.data1.original$train == 0,]
churn.data2.trainset <- churn.data2.original[churn.data2.original$train == 1,]
churn.data2.testset <- churn.data2.original[churn.data2.original$train == 0,]
churn.data1.trainColNum <- grep("train", names(churn.data1.trainset))
churn.data2.trainColNum <- grep("train", names(churn.data2.trainset))
churn.data1.trainset <- churn.data1.trainset[,-churn.data1.trainColNum]
churn.data1.testset <- churn.data1.testset[,-churn.data1.trainColNum]
churn.data2.trainset <- churn.data2.trainset[,-churn.data2.trainColNum]
churn.data2.testset <- churn.data2.testset[,-churn.data2.trainColNum]
churn.data1.model <- rpart(Class~., data = churn.data1.trainset, method = "class")
churn.data2.model <- rpart(churn~., data = churn.data2.trainset, method = "class")
plot(churn.data1.model)
text(churn.data1.model)
plot(churn.data2.model)
text(churn.data2.model)
plot(churn.data1.model)
text(churn.data1.model)
plot(churn.data2.model)
text(churn.data2.model)
plot(churn.data2.model)
text(churn.data2.model,digits=3)
plot(churn.data2.model)
churn.data2.model <- rpart(churn~., data = churn.data2.trainset, method = "class")
plot(churn.data2.model)
text(churn.data2.model,digits=3)
churn.data2.model <- rpart(churn~., data = churn.data2.trainset)
plot(churn.data2.model)
text(churn.data2.model,digits=3)
churn.data2.tree.model <- rpart(churn~.,data=churn.data2.original)
plot(churn.data2.tree.model)
text(churn.data2.tree.model,digits=3)
library(ggplot2)
churn.data1.original <- read.table(file="./data/DATA1_churn_analysis.csv", header=T, sep = ",")
churn.data2.original <- read.table(file="./data/DATA2_churn_analysis.csv", header=T, sep = ",")
churn.data1.original$aug_user_type <- as.numeric(as.factor(churn.data1.original$aug_user_type))
churn.data1.original$sep_user_type <- as.numeric(as.factor(churn.data1.original$sep_user_type))
churn.data1.original$aug_fav_a <- as.numeric(as.factor(churn.data1.original$aug_fav_a))
churn.data1.original$sep_fav_a <- as.numeric(as.factor(churn.data1.original$sep_fav_a))
churn.data1.original$Class <- as.numeric(as.factor(churn.data1.original$Class))
churn.data2.original$state <- as.numeric(as.factor(churn.data2.original$state))
churn.data2.original$phone.number <- as.numeric(as.factor(churn.data2.original$phone.number))
churn.data2.original$international.plan <- as.numeric(as.factor(churn.data2.original$international.plan))
churn.data2.original$voice.mail.plan <- as.numeric(as.factor(churn.data2.original$voice.mail.plan))
churn.data2.original$churn <- as.numeric(as.factor(churn.data2.original$churn))
# Set a seed
set.seed(42)
# Add a column to the dataset and insert 1 foo training, else 0
churn.data1.original[, "train"] <- ifelse(runif(nrow(churn.data1.original))<0.8,1,0)
churn.data2.original[, "train"] <- ifelse(runif(nrow(churn.data2.original))<0.8,1,0)
churn.data1.trainset <- churn.data1.original[churn.data1.original$train == 1,]
churn.data1.testset <- churn.data1.original[churn.data1.original$train == 0,]
churn.data2.trainset <- churn.data2.original[churn.data2.original$train == 1,]
churn.data2.testset <- churn.data2.original[churn.data2.original$train == 0,]
churn.data1.trainColNum <- grep("train", names(churn.data1.trainset))
churn.data2.trainColNum <- grep("train", names(churn.data2.trainset))
churn.data1.trainset <- churn.data1.trainset[,-churn.data1.trainColNum]
churn.data1.testset <- churn.data1.testset[,-churn.data1.trainColNum]
churn.data2.trainset <- churn.data2.trainset[,-churn.data2.trainColNum]
churn.data2.testset <- churn.data2.testset[,-churn.data2.trainColNum]
churn.data1.model <- rpart(Class~., data = churn.data1.trainset, method = "class")
churn.data2.model <- rpart(churn~., data = churn.data2.trainset, method = "class")
plot(churn.data1.model)
text(churn.data1.model)
plot(churn.data2.model)
text(churn.data2.model)
churn.data1.typeColNum <- grep("Class", names(churn.data1.original))
churn.data2.typeColNum <- grep("churn", names(churn.data2.original))
churn.data1.predict <- predict(churn.data1.model, churn.data1.testset[,-churn.data1.typeColNum], type = "class")
churn.data2.predict <- predict(churn.data2.model, churn.data2.testset[,-churn.data2.typeColNum], type = "class")
mean(churn.data1.predict == churn.data1.testset$Class)
printcp(churn.data1.predict)
table(pred = churn.data1.predict, true = churn.data1.testset$Class)
mean(churn.data2.predict == churn.data2.testset$churn)
table(pred = churn.data2.predict, true = churn.data2.testset$churn)
printcp(churn.data2.predict)
mean(churn.data1.predict == churn.data1.testset$Class)
printcp(churn.data1.predict)
table(pred = churn.data1.predict, true = churn.data1.testset$Class)
printcp(churn.data1.predict)
printcp(churn.data1.model)
printcp(churn.data2.model)
plotcp(churn.data1.model)
plotcp(churn.data2.model)
churn.data1.opt <- which.min(churn.data1.model$cptable[,"xerror"])
churn.data1.cp <- churn.data1.model$cptable[churn.data1.opt, "CP"]
churn.data1.cp
churn.data1.opt <- which.min(churn.data1.model$cptable[,"xerror"])
churn.data1.cp <- churn.data1.model$cptable[churn.data1.opt, "CP"]
churn.data1.cp
churn.data2.opt <- which.min(churn.data2.model$cptable[,"xerror"])
churn.data2.cp <- churn.data2.model$cptable[churn.data2.opt, "CP"]
churn.data2.cp
churn.data1.pruned_model <- prune(churn.data1.model, cp)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, churn.data1.cp)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.05)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.07)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.7)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.09)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.05)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.03)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, 0.02)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data2.cp
churn.data2.pruned_model <- prune(churn.data2.model, 0.000001)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.0001)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.01)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.1)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.05)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model_predict <- predict(churn.data2.pruned_model, churn.data2.testset[, -churn.data2.typeColNum], type = "class")
mean(churn.data2.pruned_model_predict == churn.data2.testset$churn)
churn.data2.pruned_model <- prune(churn.data2.model, 0.5)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.08)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model_predict <- predict(churn.data2.pruned_model, churn.data2.testset[, -churn.data2.typeColNum], type = "class")
mean(churn.data2.pruned_model_predict == churn.data2.testset$churn)
churn.data2.pruned_model <- prune(churn.data2.model, 0.05)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model_predict <- predict(churn.data2.pruned_model, churn.data2.testset[, -churn.data2.typeColNum], type = "class")
mean(churn.data2.pruned_model_predict == churn.data2.testset$churn)
churn.data2.pruned_model <- prune(churn.data2.model, 0.01)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model_predict <- predict(churn.data2.pruned_model, churn.data2.testset[, -churn.data2.typeColNum], type = "class")
mean(churn.data2.pruned_model_predict == churn.data2.testset$churn)
churn.data2.opt <- which.min(churn.data2.model$cptable[,"xerror"])
churn.data2.cp <- churn.data2.model$cptable[churn.data2.opt, "CP"]
churn.data2.cp
mean(churn.data2.predict == churn.data2.testset$churn)
printcp(churn.data2.model)
plotcp(churn.data2.model)
table(pred = churn.data2.predict, true = churn.data2.testset$churn)
churn.data2.pruned_model <- prune(churn.data2.model, 0.017)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.0175)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
mean(churn.data2.predict == churn.data2.testset$churn)
printcp(churn.data2.model)
plotcp(churn.data2.model)
table(pred = churn.data2.predict, true = churn.data2.testset$churn)
churn.data2.pruned_model <- prune(churn.data2.model, 0.0175)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.019)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.02)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data1.pruned_model <- prune(churn.data1.model, churn.data1.cp)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
mean(churn.data1.predict == churn.data1.testset$Class)
printcp(churn.data1.model)
plotcp(churn.data1.model)
table(pred = churn.data1.predict, true = churn.data1.testset$Class)
churn.data1.pruned_model <- prune(churn.data1.model, 0.025)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
mean(churn.data1.predict == churn.data1.testset$Class)
printcp(churn.data1.model)
plotcp(churn.data1.model)
table(pred = churn.data1.predict, true = churn.data1.testset$Class)
churn.data1.pruned_model <- prune(churn.data1.model, 0.023)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
multiple_runs_classification <- function(train_fraction, n, dataset, prune_tree = FALSE){
fraction_correct <- rep(NA, n)
set.seed(42)
for(i in 1:n){
dataset <- dataset[sample(nrow(dataset)),]
dataset[, "train"] <- ifelse(runif(nrow(dataset))<train_fraction,1,0)
trainset <- dataset[dataset$train == 1,]
testset <- dataset[dataset$train == 0,]
trainColNum <- grep("train", names(trainset))
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
rpart_model <- rpart(Class~., data = trainset, method = "class")
if(prune_tree){
pruned_model <- prune(rpart_model, cp)
rpart_pruned_predict <- predict(pruned_model, testset[, -typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_pruned_predict == testset$Class);
}else{
rpart_predict <- predict(rpart_model, testset[,-typeColNum], type = "class")
fraction_correct[i] <- mean(rpart_predict == testset$Class);
}
}
return(fraction_correct)
}
plot(churn.data1.model)
text(churn.data1.model)
plot(churn.data2.model)
text(churn.data2.model)
mean(churn.data1.predict == churn.data1.testset$Class)
printcp(churn.data1.model)
plotcp(churn.data1.model)
table(pred = churn.data1.predict, true = churn.data1.testset$Class)
mean(churn.data1.pruned_model_predict == churn.data1.testset$Class)
churn.data1.pruned_model_predict <- predict(churn.data1.pruned_model, churn.data1.testset[, -churn.data1.typeColNum], type = "class")
mean(churn.data1.pruned_model_predict == churn.data1.testset$Class)
printcp(churn.data1.model)
plotcp(churn.data1.model)
table(pred = churn.data1.predict, true = churn.data1.testset$Class)
table(pred = churn.data1.predict)
# Nous avons 146 vrais positifs, 147 vrais négatifs, 53 faux positifs et 55 faux négatifs
table(pred = churn.data1.predict/length(churn.data1.predict), true = churn.data1.testset$Class/length(churn.data1.predict))
# Nous avons 146 vrais positifs, 147 vrais négatifs, 53 faux positifs et 55 faux négatifs
table(pred = churn.data1.predict, true = churn.data1.testset$Class)/length(churn.data1.predict)
# Nous avons 146 vrais positifs, 147 vrais négatifs, 53 faux positifs et 55 faux négatifs
churn.data1.confusion <- table(pred = churn.data1.predict, true = churn.data1.testset$Class)/length(churn.data1.predict)
churn.data1.confusion[0,0]
churn.data1.confusion[0]
churn.data1.confusion[0,]
churn.data1.confusion[1]
churn.data1.confusion[1,1]
churn.data1.confusion <- table(pred = churn.data1.predict, true = churn.data1.testset$Class)/length(churn.data1.predict)
churn.data1.confusion.vp <- churn.data1.confusion[1,1]
churn.data1.confusion.vn <- churn.data1.confusion[2,2]
churn.data1.confusion.fp <- churn.data1.confusion[2,1]
churn.data1.confusion.fn <- churn.data1.confusion[1,2]
churn.data1.confusion.vp/(churn.data1.confusion.vp+churn.data1.confusion.vn)
churn.data1.confusion.vp/(churn.data1.confusion.vp+churn.data1.confusion.fp)
churn.data1.confusion.vp/(churn.data1.confusion.vp+churn.data1.confusion.vn)
mean(churn.data2.predict == churn.data2.testset$churn)
printcp(churn.data2.model)
printcp(churn.data2.model)
plotcp(churn.data1.model)
plotcp(churn.data2.model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.02)
plot(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.018)
plot(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.02)
plot(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0)
plot(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.015)
plot(churn.data2.pruned_model)
plotcp(churn.data2.model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.015)
plot(churn.data2.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.017)
plot(churn.data2.pruned_model)
churn.data2.confusion <- table(pred = churn.data2.predict, true = churn.data2.testset$churn)/length(churn.data2.predict)
churn.data2.confusion.vp <- churn.data2.confusion[1,1]
churn.data2.confusion.vn <- churn.data2.confusion[2,2]
churn.data2.confusion.fp <- churn.data2.confusion[2,1]
churn.data2.confusion.fn <- churn.data2.confusion[1,2]
churn.data1.confusion.vp/(churn.data1.confusion.vp+churn.data1.confusion.fp)
# Nous avons une précision de 0.73
churn.data1.confusion.vp/(churn.data1.confusion.vp+churn.data1.confusion.vn)
# Nous avons un recall de 0.43
churn.data2.confusion.vp/(churn.data2.confusion.vp+churn.data2.confusion.fp)
# Nous avons une précision de 0.73
churn.data2.confusion.vp/(churn.data2.confusion.vp+churn.data2.confusion.vn)
# Nous avons un recall de 0.43
churn.data1.pruned_model <- prune(churn.data1.model, 0.023)
plot(churn.data1.pruned_model)
text(churn.data1.pruned_model)
churn.data2.pruned_model <- prune(churn.data2.model, 0.017)
plot(churn.data2.pruned_model)
text(churn.data2.pruned_model)
churn.data1.pruned_model_predict <- predict(churn.data1.pruned_model, churn.data1.testset[, -churn.data1.typeColNum], type = "class")
mean(churn.data1.pruned_model_predict == churn.data1.testset$Class)
churn.data2.pruned_model_predict <- predict(churn.data2.pruned_model, churn.data2.testset[, -churn.data2.typeColNum], type = "class")
mean(churn.data2.pruned_model_predict == churn.data2.testset$churn)
